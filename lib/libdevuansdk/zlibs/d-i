#!/usr/bin/env zsh

## live-build(7) - System Build Scripts
## Copyright (C) 2006-2014 Daniel Baumann <mail@daniel-baumann.ch>
##
## This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.

LB_DEBIAN_INSTALLER_GUI="true"
APT_OPTIONS="--yes"

DESTDIR="binary/install"
DI_IMAGE_TYPE="cdrom"
DI_REMOTE_BASE="cdrom"
DI_REMOTE_BASE_GTK="cdrom/gtk"
DI_REMOTE_KERNEL="vmlinuz"

VMLINUZ_DI="vmlinuz"
INITRD_DI="initrd.gz"
DESTDIR_DI="${DESTDIR}"

VMLINUZ_GI="gtk/vmlinuz"
INITRD_GI="gtk/initrd.gz"
DESTDIR_GI="${DESTDIR}/gtk"

LB_MIRROR_DEBIAN_INSTALLER="https://pkgmaster.devuan.org/devuan"
LB_DEBIAN_INSTALLER="live"

_LB_CACHE_DIR="${workdir}/cache/installer_debian-installer"

URL="${mirror}/dists/${release}/main/installer-${arch}/current/images"
URL_di="${LB_MIRROR_DEBIAN_INSTALLER}/dists/${release}/main/installer-${arch}/current/images"	


DI_FIRMWARE_PACKAGES=""

UDEBS=""


build_iso_dist_d-i() {
	fn build_iso_dist
	req=(workdir strapdir os arch)
	ckreq || return 1

	notice "building complete d-i iso image"

	bootstrap_complete_base            || { zerr; wrapup }

	build_kernel_${arch}               || { zerr; wrapup }
	iso_prepare_strap                  || { zerr; wrapup }
	bootstrap_thirdstage               || { zerr; wrapup }
	install-customdebs                 || { zerr; wrapup }
	blend_preinst                      || { zerr; wrapup }
	blend_postinst                     || { zerr; wrapup }
	blend_finalize                     || { zerr; wrapup }
	fill_apt_cache                     || { zerr; wrapup }
	di_disk_info                       || { zerr; wrapup }
	di_preseed_cfg                     || { zerr; wrapup }
	di_devuan_installer                || { zerr; wrapup }	# di
	di_customize                       || { zerr; wrapup }	
	di_win32-loader         		   || { zerr; wrapup }  # di
 	di_add_symlinks                    || { zerr; wrapup }  # di
 	iso_setup_isolinux				   || { zerr; wrapup }
	iso_write_isolinux_cfg             || { zerr; wrapup }
	iso_make_efi                       || { zerr; wrapup }
	blend_prebuild	                   || { zerr; wrapup }	
	iso_setup_variables                || { zerr; wrapup }
	iso_setup_kernel                   || { zerr; wrapup }
	iso_squash_strap                   || { zerr; wrapup }
 	iso_xorriso_build                  || { zerr; wrapup }

}

iso_setup_isolinux() {
	fn iso_setup_isolinux
	req=(workdir strapdir release arch url_pkg)
	ckreq || return 1

	notice "setting up isolinux"

	mkdir -p $workdir/binary/{live,isolinux}
	act "copying kernel and initrd"
	cp $strapdir/boot/vmlinuz* $workdir/binary/live/vmlinuz
	cp $strapdir/boot/initrd*  $workdir/binary/live/initrd.img
	#cp $strapdir/boot/memtest86+.bin $workdir/binary/live/memtest	
	
	rm -rf $workdir/syslinux
	mkdir -p $workdir/syslinux
	pushd $workdir/syslinux
	wget $url_pkg/dists/$release/main/binary-$arch/Packages.gz
	rm -f Packages
	gzip -d Packages.gz
	
	line=`grep "^Filename:" Packages | grep "syslinux_"`
	
	line=${line##*/}
	line=${line%%-*}
	
	wget $url_pkg/dists/$release/main/source/Sources.gz
	rm -f Sources
	gzip -d Sources.gz
	
	if grep "syslinux_" Sources | grep ".orig.tar.gz"
	then
	    line=`grep "syslinux_" Sources | grep ".orig.tar.g z"`
	elif  grep "syslinux_" Sources | grep ".orig.tar.xz"
	then
	    line=`grep "syslinux_" Sources | grep ".orig.tar.xz"`
	fi
		
	wget http://deb.debian.org/debian/pool/main/s/syslinux/syslinux_${line##*_}	
	if [ ${line##*.} = "xz" ]; then
		tar -Jxvf "syslinux_${line##*_}"
	elif [ ${line##*.} = "gz" ]; then
		tar -xzvf "syslinux_${line##*_}"
	fi

	notice "building syslinux"
	pushd syslinux-*
	make
	popd && popd
	
	case $arch in
		i386)   bits="32"      ;;
		amd64)  bits="64"      ;;
	esac
	
	case $bits in
		"32")  efiboot="bootia32.efi"     ;;
		"64")  efiboot="bootix32.efi"     ;;
	esac
		
	cp -rav $workdir/syslinux/syslinux-*/bios/core/isolinux.bin                  $workdir/binary/isolinux/
	cp -rav $workdir/syslinux/syslinux-*/bios/com32/chain/chain.c32              $workdir/binary/isolinux/
	cp -rav $workdir/syslinux/syslinux-*/bios/com32/elflink/ldlinux/ldlinux.c32  $workdir/binary/isolinux/
	cp -rav $workdir/syslinux/syslinux-*/bios/com32/lib/libcom32.c32             $workdir/binary/isolinux/	
	cp -rav $workdir/syslinux/syslinux-*/bios/com32/libutil/libutil.c32          $workdir/binary/isolinux/
	cp -rav $workdir/syslinux/syslinux-*/bios/com32/menu/vesamenu.c32            $workdir/binary/isolinux/
	
	rm -rf $workdir/syslinux
}

# DEVUAN INSTALLER ++++++++++++++++++++++++++++++++++++++++++

Find_files () {
	fn Find_files
	req=(workdir strapdir os arch)
	ckreq || return 1

	# notice "Find_files"
		
	(ls "${@}" | grep -qs .) > /dev/null 2>&1
}

Install_file() {
	fn Install_file
	req=(workdir strapdir os arch)
	ckreq || return 1

	# notice "Install_file"	
	
	local FILE
	FILE="${1}"

	local ARCHIVE_AREA
	ARCHIVE_AREA="$(dpkg -I ${FILE} | awk '/^.*Section: / { print $2 }')"

	if echo "${ARCHIVE_AREA}" | grep -qs '/'
	then
		ARCHIVE_AREA="$(echo ${ARCHIVE_AREA} | awk -F/ '{ print $1 }')"
	else
		ARCHIVE_AREA="main"
	fi

	local TARGET
	TARGET="${2}/${ARCHIVE_AREA}"

	SOURCE="$(dpkg -f ${FILE} Source | awk '{ print $1 }')"

	if [ -z "${SOURCE}" ]
	then
		SOURCE="$(basename ${FILE} | awk -F_ '{ print $1 }')"
	fi

	case "${SOURCE}" in
		lib?*)
			LETTER="$(echo ${SOURCE} | sed 's|\(....\).*|\1|')"
			;;

		*)
			LETTER="$(echo ${SOURCE} | sed 's|\(.\).*|\1|')"
			;;
	esac

	# Install directory
	sudo mkdir -p "${TARGET}"/"${LETTER}"/"${SOURCE}"

	# Move files
	sudo cp "${FILE}" "${TARGET}"/"${LETTER}"/"${SOURCE}"
}

Download_file () {
	fn Download_file
	req=(workdir strapdir os arch)
	ckreq || return 1

	# notice "Download_file"
		
	local _LB_TARGET
	_LB_TARGET="${1}"

	local _LB_URL
	_LB_URL="${2}"
	
	echo "${_LB_URL}"

	_LB_CACHE_FILE="${_LB_CACHE_DIR}/$(echo "${_LB_URL}" | sed 's|/|_|g')"
	
	# echo "${_LB_CACHE_FILE}"

	if [ ! -f "${_LB_CACHE_FILE}" ]
	then
		mkdir -p ${_LB_CACHE_DIR}
		wget -c ${WGET_OPTIONS} -O "${_LB_CACHE_FILE}" "${_LB_URL}"
		#~ if ! wget -c ${WGET_OPTIONS} -O "${_LB_CACHE_FILE}" "${_LB_URL}"
		#~ then
			#~ rm -f "${_LB_CACHE_FILE}"

			#~ Echo_error "Could not download file: %s" "${_LB_URL}"
			#~ exit 1
		#~ fi
	fi

	if [ "$(stat --printf %d "${_LB_CACHE_DIR}/")" = "$(stat --printf %d ./)" ]
	then
		CP_OPTIONS="-l"
	fi

	cp -f ${CP_OPTIONS} -- "${_LB_CACHE_FILE}" "${_LB_TARGET}"
}

Repack_initrd(){
	fn Repack_initrd
	req=(workdir strapdir os arch)
	ckreq || return 1

	notice "Repack_initrd"
		
	local TARGET_INITRD
	local INCLUDE_PATH
	TARGET_INITRD="${1}"
	INCLUDE_PATH="${2}"
	REPACK_TMPDIR="unpacked-initrd"

	notice "Repack_initrd - ${PWD}"	
	notice "TARGET_INITRD: ${TARGET_INITRD}"	
	notice "INCLUDE_PATH : ${INCLUDE_PATH}"	

	sudo mv ${workdir}/binary ${strapdir}
	
cat <<EOF | sudo tee ${strapdir}/Repack_initrd >/dev/null
#!/bin/sh

	cd binary

	if [ -d ${INCLUDE_PATH} ]
	then
		INCLUDE_PATH=$(readlink -f ${INCLUDE_PATH})
	fi
		
	# cpio does not have an "extract to directory", so we must change directory
	mkdir -p ${REPACK_TMPDIR}
	
	cd ${REPACK_TMPDIR}
	gzip -d < ../${TARGET_INITRD} | cpio -i --make-directories --no-absolute-filenames

	# New way, include target directory content in the initrd
	REPACK_TMPDIR_ABS="${PWD}"

	cd "${INCLUDE_PATH}"
	cp -rav ./* ../${REPACK_TMPDIR}
	
	find -print0 | cpio -pumd0 --no-preserve-owner "${REPACK_TMPDIR_ABS}/"
	cd "${OLDPWD}"
	
	find -print0 | cpio -H newc -o0 | gzip -9 > ../${TARGET_INITRD}
	
EOF

cat ${strapdir}/Repack_initrd
	chroot-script -d Repack_initrd || zerr
	
	sudo mv ${strapdir}/binary ${workdir}
	
	sudo rm -rf ${workdir}/binary/includes.installer
	sudo rm -rf ${workdir}/binary/unpacked-initrd

	notice "Repack_initrd - END"
}

di_download_installers(){
	fn di_download_installers
	req=(workdir strapdir os arch)
	ckreq || return 1

	notice "di_download_installers - ${PWD}"
# ls -al ${workdir}/binary

# s	notice "Downloading debian-installer"
	mkdir -p "${workdir}"/"${DESTDIR_DI}"
	Download_file "${workdir}"/"${DESTDIR}"/"${VMLINUZ_DI}" ${URL_di}/${DI_REMOTE_BASE}/${DI_REMOTE_KERNEL}
	Download_file "${workdir}"/"${DESTDIR}"/"${INITRD_DI}" ${URL_di}/${DI_REMOTE_BASE}/initrd.gz

	if [ "${LB_DEBIAN_INSTALLER_GUI}" = "true" ]
	then
		notice "Downloading graphical-installer"
		mkdir -p "${workdir}"/"${DESTDIR_GI}"
		Download_file "${workdir}"/"${DESTDIR}"/"${VMLINUZ_GI}" ${URL_di}/${DI_REMOTE_BASE_GTK}/${DI_REMOTE_KERNEL}
		Download_file "${workdir}"/"${DESTDIR}"/"${INITRD_GI}" ${URL_di}/${DI_REMOTE_BASE_GTK}/initrd.gz
	fi		

	notice "di_download_installers - END"
}

di_download_debs(){
	fn di_download_debs
	req=(workdir strapdir os mirror release arch)
	ckreq || return 1

	notice "di_download_debs - ${PWD}"
# ls -al ${workdir}/binary
# 	notice "Downloading additional packages"	
	mkdir -p "${workdir}"/binary.deb/archives/partial
	mkdir -p "${workdir}"/cache/contents.binary
	mv $strapdir/var/lib/dpkg/status $strapdir/var/lib/dpkg/status.tmp
	touch $strapdir/var/lib/dpkg/status
	
	#~ DI_PACKAGES="lilo grub-pc linux-image-${flavor} busybox cryptsetup busybox cryptsetup mdadm lvm2 xfsprogs jfsutils"
	#~ DI_REQ_PACKAGES="console-setup keyboard-configuration kbd"
	DI_PACKAGES="lilo grub-pc linux-image-${arch} busybox cryptsetup mdadm lvm2 xfsprogs jfsutils console-setup keyboard-configuration kbd"
	DI_REQ_PACKAGES="lilo grub-pc console-setup keyboard-configuration kbd"
	DI_FIRMWARE_PACKAGES=""
	
	notice "Include firmware packages : ${section}"
	if echo ${section} | grep -qs "non-free"
	then
		# firmware-linux-nonfree
		DI_FIRMWARE_PACKAGES="${DI_FIRMWARE_PACKAGES} firmware-linux-nonfree"
	fi
					
	notice "Set apt command prefix"
	_LB_APT_COMMAND="apt-get ${APT_OPTIONS} -o Dir::Cache=/binary.deb -o APT::Install-Recommends=false --download-only"
	
	notice "Download .debs of the required packages"
	sudo mv ${workdir}/binary.deb ${strapdir}

	echo "sudo ${_LB_APT_COMMAND} install ${DI_PACKAGES} ${DI_FIRMWARE_PACKAGES} ${DI_REQ_PACKAGES}"
	
	notice "sudo cat > ${strapdir}/downloadpkgs"
	notice "The following additional packages will be installed:"
cat <<EOF | sudo tee ${strapdir}/downloadpkgs >/dev/null
#!/bin/sh

if [ ! -d "/tmp" ]; then
	mkdir /tmp
	chmod 1777 /tmp
fi

	sudo apt-get update
	
	
	## MANUALLY ADD "${grub_efi} ${grub_efi}-bin"

	_LB_APT_COMMAND="apt-get ${APT_OPTIONS} -o Dir::Cache=/binary.deb -o APT::Install-Recommends=false --download-only"
	# _LB_APT_COMMAND="apt-get ${APT_OPTIONS} -o APT::Install-Recommends=false --download-only"
	# DI_PACKAGES="lilo grub-pc linux-image-amd64 busybox cryptsetup mdadm lvm2 xfsprogs jfsutils console-setup keyboard-configuration kbd"
	# DI_FIRMWARE_PACKAGES=""
	#~ # DI_REQ_PACKAGES="${grub_efi} ${grub_efi}-bin"
	
	# We don't want to duplicate .debs of packages in binary/pool that are already
	# installed to target/ via live-installer.
	#
	# However, we need to force various packages' inclusion in binary/pool as
	# d-i does not support (for example) re-installing grub from target/ - the grub
	# .debs must actually exist.

	# Download .debs of the required packages		
	# Chroot chroot ${_LB_APT_COMMAND} install ${DI_PACKAGES} ${DI_FIRMWARE_PACKAGES} ${DI_REQ_PACKAGES}
	sudo ${_LB_APT_COMMAND} install ${DI_PACKAGES} ${DI_FIRMWARE_PACKAGES} ${DI_REQ_PACKAGES}

#	sudo apt-get clean
	
EOF
cat ${strapdir}/downloadpkgs
	chroot-script -d downloadpkgs || zerr

	notice "Drop the packages already installed that d-i doesn't explicitely need"
	_REMAINING_PACKAGES="$(echo ${DI_FIRMWARE_PACKAGES} ${DI_REQ_PACKAGES} | sed -e 's# #|#g')"
	# echo "_REMAINING_PACKAGES : ${_REMAINING_PACKAGES}"
	_REMAINING_PACKAGES="$(sed -n -e 's|Package: ||p' ${strapdir}/var/lib/dpkg/status.tmp |  grep -E -v "^(${_REMAINING_PACKAGES})\$")" ## PROBLEM
	# echo "_REMAINING_PACKAGES : ${_REMAINING_PACKAGES}"

	echo "# REMAINING_PACKAGES : ${_REMAINING_PACKAGES}"

ls -al ${strapdir}/binary.deb/archives
	notice "Delete REMAINING_PACKAGES" #${_REMAINING_PACKAGES}"
	for _PACKAGE in $(echo ${_REMAINING_PACKAGES})
	do
	
		#~ echo "Remove REMAINING_PACKAGES : ${_PACKAGE}"
		#~ if [ "$_PACKAGE" = "firmware-linux-nonfree" ] ; then
			#~ echo "Keep : ${_PACKAGE}"
			#~ continue
		#~ fi
		# if [ -f ${strapdir}/binary.deb/archives/${_PACKAGE}_*.deb ]
		if ls ${strapdir}/binary.deb/archives/${_PACKAGE}_*.deb > /dev/null 2>&1
		then
			echo "Remove: ${_PACKAGE}"
			rm -f ${strapdir}/binary.deb/archives/${_PACKAGE}_*.deb
		fi		
	done
# ls -al ${strapdir}/binary.deb/archives

	notice "Revert dpkg status file"
	mv ${strapdir}/var/lib/dpkg/status.tmp chroot/var/lib/dpkg/status

	notice "mv chroot/binary.deb ./ : ${PWD}"
	sudo mv ${strapdir}/binary.deb ${workdir}

	notice "Create binary/pool"
	for _ARCHIVE_AREA in $(echo ${section} DEVUAN DEBIAN)
	do
	# echo "${_ARCHIVE_AREA}"
		sudo mkdir -p "${workdir}"/binary/pool/${_ARCHIVE_AREA}
	done

# ls -al ${workdir}/binary.deb/archives
	notice "Add deb's to binary/pool"
	# if Find_files "${workdir}"/binary.deb/archives/*.deb
	if ls ${workdir}/binary.deb/archives/*.deb > /dev/null 2>&1
	then
		for FILE in "${workdir}"/binary.deb/archives/*.deb
		do
		# echo "${FILE}"
			Install_file "${FILE}" "${workdir}"/binary/pool
		done
	fi

	notice "Including base debian packages"
	if ls ${workdir}/cache/packages.bootstrap/*.deb > /dev/null 2>&1
	then
		for FILE in ${workdir}/cache/packages.bootstrap/*.deb
		do
		# echo "${FILE}"		
			Install_file "${FILE}" ${workdir}/binary/pool
		done
	fi

	notice "Including local debs"
	# if Find_files $R/extra/common/devuan-installer/packages.binary/*_"${arch}".deb
	if ls $R/extra/common/devuan-installer/packages.binary/*_${arch}.deb > /dev/null 2>&1
	then
		for FILE in $R/extra/common/devuan-installer/packages.binary/*_${arch}.deb
		do
		# echo "${FILE}"		
			if [ -e "${FILE}" ]
			then
				Install_file "${FILE}" ${workdir}/binary/pool
			fi
		done
	fi

	# if Find_files $R/extra/common/devuan-installer/packages.binary/*_all.deb
	if ls $R/extra/common/devuan-installer/packages.binary/*_all.deb > /dev/null 2>&1
	then
		for FILE in $R/extra/common/devuan-installer/packages.binary/*_all.deb
		do
		# echo "${FILE}"
			if [ -e "${FILE}" ]
			then
				Install_file "${FILE}" ${workdir}/binary/pool
			fi
		done
	fi
	
	notice "di_download_debs - END"

}

di_generate_deb_indices(){
	fn di_generate_deb_indices
	req=(workdir strapdir os release arch mirror)
	ckreq || return 1

	notice "di_generate_deb_indices - ${PWD}"
# ls -al ${workdir}/binary
# 	notice "Generating deb indices"
	for _ARCHIVE_AREA in $(cd ${workdir}/binary/pool && ls)
	do
	
		if [ "$_ARCHIVE_AREA" = "contrib" ] || [ "$_ARCHIVE_AREA" = "non-free" ] ; then
			continue
		fi
		
		sudo mkdir -p ${workdir}/binary/dists/${release}/${_ARCHIVE_AREA}/binary-${arch}
		
		sudo mv ${workdir}/binary ${strapdir}
		
cat <<EOF | sudo tee ${strapdir}/"deb-index-"${_ARCHIVE_AREA} >/dev/null
#!/bin/sh
cd binary && apt-ftparchive packages pool/${_ARCHIVE_AREA} > dists/${release}/${_ARCHIVE_AREA}/binary-${arch}/Packages
gzip -9 -c dists/${release}/${_ARCHIVE_AREA}/binary-${arch}/Packages > dists/${release}/${_ARCHIVE_AREA}/binary-${arch}/Packages.gz
rm dists/${release}/${_ARCHIVE_AREA}/binary-${arch}/Packages
EOF

cat ${strapdir}/"deb-index-"${_ARCHIVE_AREA}
		chroot-script -d "deb-index-"${_ARCHIVE_AREA} || zerr
		
		sudo rm -f ${strapdir}/deb-index-${_ARCHIVE_AREA}
		
		sudo mv ${strapdir}/binary ${workdir}

		notice "Fetching release"
		Download_file ${workdir}/binary/dists/${release}/${_ARCHIVE_AREA}/binary-${arch}/Release ${mirror}/dists/${release}/${_ARCHIVE_AREA}/binary-${arch}/Release
	done

	notice "di_generate_deb_indices - END"
}

di_symlink_firmware(){
	fn di_symlink_firmware
	req=(workdir strapdir os release arch mirror)
	ckreq || return 1

	notice "di_symlink_firmware - ${PWD}"
# ls -al ${workdir}/binary
	
 	notice "Symlink firmware packages to /firmware : DI_FIRMWARE_PACKAGES"
	# sudo rm -f $workdir/binary/pool/non-free/f/firmware-nonfree/firmware-amd-graphics_20190114-2_all.deb
	# sudo rm -f $workdir/binary/pool/non-free/f/firmware-nonfree/firmware-*_all.deb

	
	if ls $workdir/binary/pool/non-free/f/firmware-nonfree/firmware-linux*.deb > /dev/null 2>&1
	then
		# binary/pool/non-free/f/firmware-nonfree
		DI_FIRMWARE_PACKAGES="firmware-linux-nonfree"
		if [ -n "${DI_FIRMWARE_PACKAGES}" ]
		then
			echo "syslink - firmware"
			mkdir -p ${workdir}/binary/firmware
			cd ${workdir}/binary/firmware
					
			for _PACKAGE in "${DI_FIRMWARE_PACKAGES}"
			do
				echo "--1--"${_PACKAGE}
				for _FILE in $(find ../pool -name "${_PACKAGE}*.deb")
				do
					echo "--2--"${_FILE}
					ln -sf ${_FILE} ./
				done
			done

			cd "${OLDPWD}"
		fi
	else
		notice "Firmware '${DI_FIRMWARE_PACKAGES}'- not found!"		
	fi
	
	#~ notice "Symlink firmware packages to /firmware"
	#~ if ls $workdir/binary/pool/main/f/firmware-nonfree/firmware-linux-nonfree*.deb > /dev/null 2>&1
	#~ then
		#~ # DI_FIRMWARE_PACKAGES="firmware-linux-nonfree"
		#~ if [ -n "${DI_FIRMWARE_PACKAGES}" ]
		#~ then
			#~ echo "syslink - firmware"
			#~ mkdir -p $workdir/binary/firmware
			#~ pushd $workdir/binary/firmware

			#~ for _PACKAGE in ${DI_FIRMWARE_PACKAGES}
			#~ do
				#~ echo "--1--"${DI_FIRMWARE_PACKAGES}
				#~ for _FILE in $(find ../pool -name "${_PACKAGE}*.deb")
				#~ do
					#~ echo "--2--"${_FILE}
					#~ ln -sf ${_FILE} ./
				#~ done
			#~ done

			#~ popd
		#~ fi
	#~ else
		#~ notice "Firmware - not found!"
	#~ fi	
	
	notice "di_symlink_firmware - END"
	
}

di_download_udebs(){
	fn di_download_udebs
	req=(workdir strapdir os release arch mirror)
	ckreq || return 1

	notice "di_download_udebs - ${PWD} | '${workdir}'"
# ls -al ${workdir}/binary	

	mkdir -p $workdir/binary.udeb
	mkdir -p $workdir/udeb
	
	sudo chmod +w ${workdir}/binary.udeb
	sudo chmod +w ${workdir}/udeb
	#~ sudo chmod +w ${workdir}/udeb/current
	
	cd $workdir/binary.udeb

# 	notice "Downloading udeb indices"
	echo "Download_file Packages.gz ${mirror}/dists/${release}/main/debian-installer/binary-${arch}/Packages.gz"
	wget -c http://deb.devuan.org/merged/dists/"${release}"/main/debian-installer/binary-"${arch}"/Packages.gz
	
	notice "gunzip -c Packages.gz > Packages - ${PWD}"
	gunzip -c Packages.gz > Packages
# ls -al
	awk '/Filename: /' Packages > tmpPackages
	awk '/Filename: / { print $2 }' tmpPackages > Packages-UDEB
	rm -rf tmpPackages

	UDEBS="${UDEBS} $(awk '/Filename: / { print $2 }' Packages)"
	notice "Downloading udebs packages - ${PWD}"
	for UDEB in $(cat Packages-UDEB)
	do
		echo "1 - [${UDEB}]"
		if [ -f $workdir/cache/packages.installer_debian-installer.udeb/"$(basename ${UDEB})" ]
		then
			# echo "2 - [${UDEB}]"
			# Copying cached udebs
			cp $workdir/cache/packages.installer_debian-installer.udeb/"$(basename ${UDEB})" $workdir/binary.udeb
		else
			# Downloading udebs
			notice "Downloading udebs - $(basename ${UDEB} | awk -F_ '{ print $1 }')"
			if ! ls "$(basename ${UDEB} | awk -F_ '{ print $1 }')"_* > /dev/null 2>&1
			then
				echo "2 - [sudo wget ${WGET_OPTIONS} ${mirror}/${UDEB}]"
				sudo wget ${WGET_OPTIONS} ${mirror}/${UDEB}
			fi
		fi
	done

	notice "Copying local udebs packages"
	if ls $R/extra/custom-udebs/${release}/*.udeb > /dev/null 2>&1
	then
		list=$workdir/custom_udebs_list
		var1=`find $R/extra/custom-udebs/$release -name "*_$arch.udeb"`
		var2=`find $R/extra/custom-udebs/$release -name "*_all.udeb"`
		echo "${var1}\n${var2}" > $list
	
		for line in $(cat $list); do
			# echo ${line}
			cp $line $workdir/binary.udeb
		done
	
		rm -f $workdir/custom_udebs_list	
	fi

	# -4.19.0-9-
	# btrfs-modules- -amd64-di_4.19.118-2+deb10u1_amd64.udeb

	notice "Remove old udebs [*-${abiname}-*]"
	
	sudo mv $workdir/binary.udeb/*-modules-*.udeb $workdir/udeb
	sudo mv $workdir/udeb/*-modules-$abiname-*.udeb $workdir/binary.udeb
	sudo rm -f $workdir/udeb/*
	
	#~ awk '/Filename: / { print $2 }' tmpPackages > Packages-UDEB
	#~ UDEBS="${UDEBS} $(awk '/Filename: / { print $2 }' Packages)"
	#~ notice "Downloading udebs packages - ${PWD}"
	#~ for UDEB in $(cat Packages-UDEB)
	#~ do
		#~ $UDEB >> Packages-UDEB2
	#~ done	
		
	#~ ls -al $workdir/binary.udeb
	#~ if ls $workdir/binary.udeb/*.udeb > /dev/null 2>&1
	#~ then
		#~ IFS=$'-' read -rd '' -A y <<<"$abiname"
		#~ var="${y[1]}"
		#~ echo "kernel family 1: ${var}"
		
		#~ var1=`find $workdir/binary.udeb -name "*-${var}-*.udeb"`
		#~ echo "${var1}"
		#~ echo "${var1}" > $list
		#~ echo "########### 1"		
		#~ # echo $list
		#~ for line in $(cat $var1); do
			#~ echo "kernel family 2: *-${var}-*.udeb: ${line}"
			#~ mv $line $workdir/udeb
		#~ done
		#~ echo "########### 1.1"
		#~ ls -al $workdir/udeb
		
		#~ echo "########### 1 - END"
		
		#~ var1=`find $workdir/udeb -name "*-${abiname}-*.udeb"`
		#~ echo "${var1}" > $list
		#~ echo "########### 2"
		#~ # echo $list
		#~ echo "abiname: *-${abiname}-*.udeb"
		#~ for line in $(cat $var1); do
			#~ echo "abiname: *-${abiname}-*.udeb: ${line}"
			#~ mv $line $workdir/binary.udeb
		#~ done
		#~ echo "########### 2"

	#~ fi
	#~ notice "Remove old udebs [*-${abiname}-*]"
	#~ if ls $workdir/binary.udeb/*.udeb > /dev/null 2>&1
	#~ then
		#~ IFS=$'-' read -rd '' -A y <<<"$abiname"
		#~ var="${y[1]}"
		#~ # echo "kernel family 1: ${var}"
		
		#~ var1=`find $workdir/binary.udeb -name "*-${var}-*.udeb"`
		#~ echo "${var1}" > $list
		#~ # echo "########### 1"		
		#~ # cat $list
		#~ for line in $(cat $list); do
			#~ # echo "kernel family 2: *-${var}-*.udeb: ${line}"
			#~ mv $line $workdir/udeb
		#~ done
		#~ # echo "########### 1.1"
		#~ # ls -al $workdir/udeb
		
		#~ # echo "########### 1 - END"
		
		#~ var1=`find $workdir/udeb -name "*-${abiname}-*.udeb"`
		#~ echo "${var1}" > $list
		#~ # echo "########### 2"
		#~ # cat $list
		#~ # echo "abiname: *-${abiname}-*.udeb"
		#~ for line in $(cat $list); do
			#~ # echo "abiname: *-${abiname}-*.udeb: ${line}"
			#~ mv $line $workdir/binary.udeb
		#~ done
		#~ # echo "########### 2"

	#~ fi
	
	notice "di_download_udebs - END"		
}

di_Caching_udebs(){
	fn di_Caching_udebs
	req=(workdir strapdir os release arch mirror)
	ckreq || return 1

	notice "di_Caching_udebs - ${PWD}"
# ls -al ${workdir}/binary
# 	notice "Caching udebs"
		
	rm -rf ${workdir}/cache/packages.installer_debian-installer.udeb
	mkdir -p ${workdir}/cache/packages.installer_debian-installer.udeb
	cp *.udeb ${workdir}/cache/packages.installer_debian-installer.udeb
	
	notice "di_Caching_udebs - END"	

}

di_add_local_udebs(){
	fn di_add_local_udebs
	req=(workdir strapdir os release arch mirror)
	ckreq || return 1

	notice "di_add_local_udebs - ${PWD}"
# ls -al ${workdir}/binary
 	notice "Including local udebs - ${arch}.udeb"
	if ls $R/extra/custom-udebs/$release/*_${arch}.udeb > /dev/null 2>&1
	then
		for FILE in $R/extra/custom-udebs/$release/*_${arch}.udeb
		do
			if [ -e "${FILE}" ]
			then
				Install_file "${FILE}" "${workdir}/binary/pool"

				# Prefer local udebs over downloaded udebs
				rm -f "$(basename ${FILE} | awk -F_ '{ print $1 }')"_*.udeb
			fi
		done
	fi

	notice "Including local udebs - _all.udeb"
	if ls $R/extra/custom-udebs/$release/*_all.udeb > /dev/null 2>&1
	then
		for FILE in $R/extra/custom-udebs/$release/*_all.udeb
		do
			if [ -e "${FILE}" ]
			then
				Install_file "${FILE}" ${workdir}/binary/pool

				# Prefer local udebs over downloaded udebs
				rm -f "$(basename ${FILE} | awk -F_ '{ print $1 }')"_*.udeb
			fi
		done
	fi
	
	notice "di_Caching_udebs - END"
}

di_excluding_udebs(){
	fn di_excluding_udebs
	req=(workdir strapdir os release arch mirror)
	ckreq || return 1

	notice "di_excluding_udebs - ${PWD}"

# 	notice "Excluding udebs"
	for LOCATION in $R/extra/common/devuan-installer/excludes
	do
		if [ -e "${LOCATION}" ]
		then
			grep -v "^#" "${LOCATION}/${release}/udeb_exclude" > $workdir/binary.udeb/exclude || true
			grep -v "^#" "${LOCATION}/${release}/exclude-udebs" >> $workdir/binary.udeb/exclude || true
			grep -v "^#" "${LOCATION}/${release}/exclude-udebs-${arch}" >> $workdir/binary.udeb/exclude || true

			continue
		fi
	done

	notice "Local exclude file"	
	if [ -e ${workdir}/config/debian-installer/udeb_exclude ]
	then
		cat ${workdir}/config/debian-installer/udeb_exclude >> $workdir/binary.udeb/exclude
	fi

	notice "Excluding udebs from excludes because we want them to be in the image on purpose"	
	sed -i -e 's|di-utils-exit-installer||' $workdir/binary.udeb/exclude # used for live-installer-launcher

	# How do I list every file in a directory except those with specified extensions?
	# https://unix.stackexchange.com/questions/47151/how-do-i-list-every-file-in-a-directory-except-those-with-specified-extensions
	# ls -I $workdir/binary//pool/DEBIAN/main/l/linux-signed-amd64/"*-${abiname}-*"

	# remove blank lines
	sudo sed '/^[[:space:]]*$/d' $workdir/binary.udeb/exclude
	
	# ls -I $workdir/binary//pool/DEBIAN/main/l/linux-signed-amd64/"*-${abiname}-*"
	#~ notice "linux-signed-amd64/*"
	#~ for _EXCLUDE in $(ls -I $workdir/binary/pool/DEBIAN/main/l/linux-signed-amd64/"*-${abiname}-*")
	#~ do
		#~ echo "EXCLUDE: ${_EXCLUDE}"
		#~ sudo rm -f "${_EXCLUDE}"
	#~ done

	for EXCLUDE in $(cat $workdir/binary.udeb/exclude)
	do
		#~ echo "EXCLUDE: ${EXCLUDE}"
		if [ "${EXCLUDE}" = "live-installer" ]
		then
			continue
		fi

		FILES=(`find $workdir/binary.udeb/ -name "${EXCLUDE}_*.udeb"`)
		echo "FILES: ${FILES}"	

		for line in $FILES
		do
			SOURCE="$(basename ${line} | awk '{ print $1 }')"
			echo "SOURCE: ${SOURCE}"

			if [ -e ${SOURCE} ]
			then
				echo "Found: ${SOURCE}"
				sudo rm -rf "${SOURCE}" # > /dev/null 2>&1
			fi			
		done
	done
	
	notice "di_excluding_udebs - END"
	 
}

di_moving_udebs(){
	fn di_moving_udebs
	req=(workdir strapdir os release arch mirror)
	ckreq || return 1
		
	notice "di_moving_udebs - ${PWD}"
	
	cd ${workdir}/binary.udeb	

	if [ ! -f "Packages-UDEB" ]
	then
		notice "Packages-UDEB - msssing!"
	fi
	
	for UDEB in $(cat Packages-UDEB)
	do
		#~ echo ${workdir}/binary/"$(dirname ${UDEB})"
		if [ -f "$(basename ${UDEB})" ]
		then
			#~ echo "UDEB : ${UDEB}"
			#~ echo "$(basename ${UDEB})"
			mkdir -p ${workdir}/binary/"$(dirname ${UDEB})"
			mv "$(basename ${UDEB})" ${workdir}/binary/"$(dirname ${UDEB})"
		fi
	done

	notice "di_moving_udebs - END"
	
}

di_create_udeb_indices(){
	fn di_create_udeb_indices
	req=(workdir strapdir os release arch mirror)
	ckreq || return 1

	notice "di_create_udeb_indices - ${PWD}"
# ls -al ${workdir}/binary	
# 	notice "Creating udeb indices"
	sudo mkdir -p ${workdir}/binary/dists/${release}/main/debian-installer/binary-${arch}

	notice "cd ${workdir}"	
	cd "${workdir}"
	
	sudo mv ${workdir}/binary.udeb ${strapdir}
	
	notice "ftparchive"
	
	# Debian has all udebs under pool/main,
	# Devuan has them spread out between pool/DEVUAN/main and
	# pool/DEBIAN/main (no udebs in pool/MARILLAT/main AFAIK)
	# so we must run apt-ftparchive more than once.
	DISTROS="pool/DEVUAN pool/DEBIAN" # Devuan compatibility

	
cat <<EOF | sudo tee ${strapdir}/apt-ftparchive-udebs >/dev/null
#!/bin/sh
cd binary.udeb

# mv Packagesfull Packages

for d in ${DISTROS}; do 
	apt-ftparchive packages \${d} 2>> tmp.Packages.err >> tmp.Packages
done

cp tmp.Packages Packages

gzip -9 -c Packages > Packages.gz

EOF

	chroot-script -d apt-ftparchive-udebs || zerr
	
	if [ -s ${strapdir}/binary.udeb/tmp.Packages.err ]; then
		echo "Errors in apt-ftparchive of udebs:"
		sudo cat ${strapdir}/binary.udeb/tmp.Packages.err
	fi

	sudo mv ${strapdir}/binary.udeb ${workdir}

	sudo cp ${workdir}/binary.udeb/Packages.gz ${workdir}/binary/dists/${release}/main/debian-installer/binary-${arch}/Packages.gz

# 	sudo cp ${workdir}/binary.udeb/tmp.Packages ${workdir}/binary/dists/${release}/main/debian-installer/binary-${arch}/Packages

# 	gzip -9 -c ${workdir}/binary/dists/${release}/main/debian-installer/binary-${arch}/Packages > ${workdir}/binary/dists/${release}/main/debian-installer/binary-${arch}/Packages.gz

	cd ${workdir}/binary.udeb
	rm -f Packages* exclude
	find . | sudo cpio -dmpu ${workdir}/binary
	cd "${OLDPWD}"

	notice "di_create_udeb_indices - END"	
}

di_generate_dist_release_file(){
	fn di_generate_dist_release_file
	req=(workdir strapdir os release arch mirror)
	ckreq || return 1

	notice "di_generate_dist_release_file - ${PWD}"
# ls -al ${workdir}/binary	
	#~ notice "Generating dist release file"
		
 	sudo mv ${workdir}/binary ${strapdir}

cat <<EOF | sudo tee ${strapdir}/release-file >/dev/null
#!/bin/sh
cd binary && apt-ftparchive \
	-o APT::FTPArchive::Release::Origin="Debian" \
	-o APT::FTPArchive::Release::Label="Debian" \
	-o APT::FTPArchive::Release::Suite="${release}" \
	-o APT::FTPArchive::Release::Version="${debian_version}" \
	-o APT::FTPArchive::Release::Codename="${release}" \
	-o APT::FTPArchive::Release::Date="$(date -R)" \
	-o APT::FTPArchive::Release::Architectures="${arch}" \
	-o APT::FTPArchive::Release::Components="main" \
	-o APT::FTPArchive::Release::Description="Last updated: $(date -R)" \
	release dists/${release} > dists/${release}/Release
EOF

# cat ${strapdir}/release-file
	chroot-script -d release-file || zerr
	
	sudo mv ${strapdir}/binary ${workdir}

# ls -al ${workdir}/binary	
	notice "di_generate_dist_release_file - END"

}

di_add_symlinks(){
	fn di_add_symlinks
	req=(workdir strapdir os suite release arch mirror)
	ckreq || return 1

	pushd ${workdir}

	notice "di_add_symlinks - ${PWD}"
# ls -al ${workdir}/binary
#	notice "Creating dist symlinks"
	for BRANCH in stable 
	do
		sudo ln -s ${release} ${workdir}/binary/dists/${suite}
	done

	# sudo ln -s ${workdir}/binary ${workdir}/binary/debian
	
	#ls -al $workdir/binary/live
	#~ sudo rm -f $workdir/binary/install/gtk/vmlinuz
	#~ sudo rm -f $workdir/binary/install/vmlinuz	
	#~ sudo ln $workdir/binary/live/vmlinuz $workdir/binary/install/gtk/vmlinuz
	#~ sudo ln $workdir/binary/live/vmlinuz $workdir/binary/install/vmlinuz	
	
	popd
	
	notice "di_add_symlinks - END"	
}

di_cleanup(){
	fn di_cleanup
	req=(workdir strapdir os release arch mirror section)
	ckreq || return 1

	notice "di_cleanup - ${PWD}"
# ls -al ${workdir}/binary	
	# notice "cleanup temp folders.."
	sudo rm -rf ${workdir}/binary.deb
	sudo rm -rf  ${workdir}/binary.udeb
	sudo rm -rf  ${workdir}/udeb	
	sudo rm -rf ${workdir}/cache
	sudo rm -rf ${workdir}/env
	sudo rm -rf ${workdir}/syslinux
	# sudo rm -f ${workdir}/binary/tmp.Packages ${workdir}/binary/tmp.Packages.err
	sudo rm -f ${workdir}/binary/*Packages* # ${workdir}/binary/Packages.gz
	sudo rm -f ${workdir}/binary/exclude
	sudo rm -rf ${workdir}/config
	sudo rm -f ${workdir}/custom_udebs_list
	
	notice "remove empty folders"
	for _ARCHIVE_AREA in $(echo ${section})
	do
		if [ -z "$(ls -A ${workdir}/binary/pool/${_ARCHIVE_AREA})" ]; then
		   sudo rm -rf "${workdir}/binary/pool/${_ARCHIVE_AREA}"
		fi
	done
		
	notice "di_cleanup - END"
		
}

di_devuan_installer() {
	fn di_devuan_installer
	req=(workdir strapdir blend section release mirror os version arch debian_version)
	ckreq || return 1
	
	notice "############ Setting up devuan-installer ############"

	di_download_installers                  || { zerr; wrapup }
	di_download_debs                  		|| { zerr; wrapup }
	di_generate_deb_indices                 || { zerr; wrapup }	
	di_symlink_firmware                 	|| { zerr; wrapup }	
	di_download_udebs                  		|| { zerr; wrapup }
	di_Caching_udebs                  		|| { zerr; wrapup }
	di_add_local_udebs                  	|| { zerr; wrapup }
	# di_exclude_udebs                 	    || { zerr; wrapup }
	di_excluding_udebs                     	|| { zerr; wrapup }
	di_moving_udebs                  		|| { zerr; wrapup }
	di_create_udeb_indices                  || { zerr; wrapup }
	di_generate_dist_release_file           || { zerr; wrapup }
	
	di_cleanup                  			|| { zerr; wrapup }
}

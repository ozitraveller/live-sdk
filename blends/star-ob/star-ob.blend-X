#!/usr/bin/env zsh
# star-ob.blend


BLENDPATH="${BLENDPATH:-$(dirname $0)}"

source $BLENDPATH/config

blend_preinst() {
	fn blend_preinst
	req=(strapdir blend release)
	ckreq || return 1

	notice "executing $blend preinst"
	
}

blend_postinst() {
	fn blend_postinst
	req=(strapdir blendname os)
	ckreq || return 1

	if [ -d $R/blend ] ; then 
		rm -rf $R/blend
	fi
	
	notice "executing $blendname postinst $BLENDPATH"
	mkdir -p blend
	cp -rf $R/extra/common/rootfs-overlay/* $R/blend
	cp -rf $BLENDPATH/rootfs-overlay/* $R/blend
	notice "Copying system hooks"
	cp -rf $R/extra/common/hooks/normal/* $R/blend/hooks
	
	#ls -al $R/blend
	
	pushd $R/blend
	local dirs=$(ls -l | awk '{print $9}')
	popd
	echo $dirs > $workdir/tmp_$$
	# Remove lines in blank:
	cat $workdir/tmp_$$ | sed '/^ *$/d' > $workdir/dirs_$$

	mkdir -p mnt
	for i in $(cat $workdir/dirs_$$); do
		mkdir -p $strapdir/$i
		if [ -d $R/blend/$i ] ; then 
			sudo rsync -avx --no-o --no-g $R/blend/$i/* $strapdir/$i
		fi
	done

	rm -rf $workdir/tmp_$$ $workdir/dirs_$$
	rm -rf $R/blend
			
	echo \
"# Xwrapper.config (Debian X Window System server wrapper configuration file)
#
# This file was generated by the post-installation script of the
# xserver-xorg-legacy package using values from the debconf database.
#
# See the Xwrapper.config(5) manual page for more information.
#
# This file is automatically updated on upgrades of the xserver-xorg-legacy
# package *only* if it has not been modified since the last upgrade of that
# package.
#
# If you have edited this file but would like it to be automatically updated
# again, run the following command as root:
#   dpkg-reconfigure xserver-xorg-legacy
allowed_users=anybody
needs_root_rights = no" > $strapdir/etc/X11/Xwrapper.config

	echo \
"#!/bin/sh

## live-config(7) - System Configuration Scripts
## Copyright (C) 2006-2013 Daniel Baumann <daniel@debian.org>
##
## This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.

set -e

# just a hack for the live-user setup under jessie

ConfigureLiveUser ()
{	
	echo -n \" Live User\"	

	groupadd $os
	/usr/sbin/useradd --home /home/$os --create-home --gid $os $os

	groups=(

		cdrom
		floppy
		audio
		dip
		sudo
		video
		plugdev
		fuse
		bluetooth
		netdev
		scanner
	)

	for i in groups; do
		usermod -a -G \$i $os
	done

	user_passwd_line=\$(awk -F':' '\$1 ~ /^${os}$/ { print \$0 }' /target/etc/passwd)
	user_new_passwd_line=\$(awk -F':' '\$1 ~ /^${os}$/ { print \$1\"::\"\$3\":\"\$4\":\"\$5\":\"\$6\":\"\$7 }' /target/etc/passwd)

	sed -i \"s/\${user_passwd_line}/\${user_new_passwd_line}/g\" /target/etc/passwd

	user_shadow_line=\$(awk -F':' '\$1 ~ /^${os}$/ { print \$0 }' /target/etc/shadow)
	user_new_shadow_line=\$(awk -F':' '\$1 ~ /^${os}$/ { print \$1\"::\"\$3\":\"\$4\":\"\$5\":\"\$6\":::\" }' /target/etc/shadow)

	sed -i \"s/\${user_shadow_line}/\${user_new_shadow_line}/g\" /target/etc/shadow

}

ConfigureLiveUser
" > $strapdir/lib/live/config/1210-live-user-setup

	chmod +x $strapdir/lib/live/config/1210-live-user-setup
	
}

blend_finalize() {
	fn blend_finalize
	req=(R strapdir os url root release blendname)
	ckreq || return 1

	notice "executing $blendname finalize"

	#cp -av $R/blends/$blend/dselect/pkglist.txt                    $strapdir/tmp/
	
	sed -i '12i Defaults    env_reset , timestamp_timeout = 0' $strapdir/etc/sudoers	

	echo \
"127.0.0.1	localhost
127.0.1.1	${os}

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters" > $strapdir/etc/hosts

	cat <<EOF | sudo tee ${strapdir}/finalize >/dev/null
#!/bin/sh

# chmod -R 755 /usr/bin/lock-screen
# hmod -R 755 /usr/bin/compositor
chmod +x /usr/local/bin/usbpmount.sh
chmod +x /usr/local/bin/usb-unmount.sh
rm -f /etc/apt/sources.list~
rm -f /etc/apt/trusted.gpg~
rm -f /home/*.deb
rm -f debconf.set
rm -f thirdstage
rm -f thirdstage.log
# rm -rf /tmp
rm -f .keep
cd /root
rm -f .bash_history .cache .dbus .gvfs .local .nano .synaptic .thumbnails
cd ..
rm -f vmlinuz.old initrd.img.old
rm -f /etc/ssh/ssh_host_*
rm -f /etc/fstab

chmod +x /usr/bin/preseed-hack
chmod +x /lib/live/config/1200-interfaces
dpkg-reconfigure xserver-xorg-legacy

apt-get clean
rm -f /var/lib/apt/lists/*_dists_*

	echo \
"
	echo \"
deb http://${url}${root} ${release} main
deb-src http://${url}${root} ${release} main

deb http://${url}${root} ${release}-updates main
deb-src http://${url}${root} ${release}-updates main

deb http://${url}${root} ${release}-security main
deb-src http://${url}${root} ${release}-security main\" > /etc/apt/sources.list

exit 0" >> /usr/bin/preseed-hack
EOF

# Remove possible existent replicated lines from sudoers:
uniq $strapdir/etc/sudoers /tmp/sudoers_$$
rm -f $strapdir/etc/sudoers
mv /tmp/sudoers_$$ $strapdir/etc/sudoers 

#ls -al $strapdir

	chroot-script finalize || zerr
	
}

blend_prebuild() {
	fn blend_prebuild
	req=(strapdir blendname)
	ckreq || return 1

notice "executing $blendname prebuild"

	blend_exec_hooks 			|| zerr
	blend_cleanup 				|| zerr
	# blend_write_isolinux_cfg	|| zerr
	blend_Copy_Grub_Overlay	    || zerr

	if ls ${strapdir}/*.txt > /dev/null 2>&1
	then
		notice "moving log file to log folder"
		mv -f $strapdir/*.txt $R/log/
	fi

}

#~ blend_exec_hooksX() {
	#~ fn blend_exec_hooksX
	#~ req=(strapdir blend os arch release extra_packages)
	#~ ckreq || return 1
	
	#~ # called from blend_prebuild

#~ notice "Running blend_exec_hooks: '${strapdir}'"

#~ notice "Copying system hooks"
	#~ # /usr/share/live/build/hooks/normal/
	#~ cp -rf $R/extra/common/hooks/normal/* ${strapdir}/hooks
	#~ cp -rf $R/extra/common/hooks/exec_hooks ${strapdir}	

	#~ ls -al ${strapdir}
	#~ ls -al ${strapdir}/hooks
	
	#~ chroot-script exec_hooks || zerr
	
#~ }

blend_exec_hooks() {
	fn blend_exec_hooks
	req=(strapdir )
	ckreq || return 1

	# called from blend_prebuild
	
notice "Running blend_exec_hooks: '${strapdir}'"
	
	cat <<EOF | sudo tee ${strapdir}/exec_hooks >/dev/null
#!/bin/sh

cd /hooks
ls ./*.chroot

## Processing local hooks
if ls ./*.chroot > /dev/null 2>&1
then

	for HOOK in ./*.chroot
	do
		if [ ! -x ./"\${HOOK}" ]
		then
			echo "chmod  hook : \${HOOK}"
			chmod +x ./"\${HOOK}"
		fi

		echo "Executing hook : \${HOOK}"
		eval ./"\${HOOK}" # || { Echo_error "\${HOOK} failed (exit non-zero). You should check for errors."; exit 1 ;}

		# echo "Removing hook : \${HOOK}"
		rm -f ./"\${HOOK}"
	done
fi

EOF

ls -al $strapdir
cat ${strapdir}/exec_hooks


	chroot-script exec_hooks || zerr
	
}

blend_cleanup() {
	fn blend_cleanup
	req=(strapdir blend blendname os version arch release release_name )
	ckreq || return 1

	# called from blend_prebuild
	
notice "Running blend_cleanup"

	cat <<EOF | sudo tee ${strapdir}/scrubclean >/dev/null
#!/bin/bash

rm -rf /hooks

apt-get --yes --force-yes autoremove
apt-get clean

EOF
# ls -al $strapdir
	chroot-script scrubclean || zerr
	
	cp -rfav $R/extra/common/extra/config-files/slim.conf $strapdir/etc/
	
	# Copy in custom apt config here! MUST BE just before the iso is created
	# \cp causes OVERWRITE
	\cp -rfav $R/extra/common/extra/apt-files/apt/* $strapdir/etc/apt/

	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/hostname
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/issue
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/issue.net
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/motd
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/usr/lib/os-release
	sed -i -e 's/RELEASE-NAME/'"${release_name}"'/g' $strapdir/usr/lib/os-release

	rm -f $strapdir/etc/os-release
	ln -sf $strapdir/usr/lib/os-release $strapdir/etc/os-release
}


blend_Copy_Grub_Overlay() {
	fn blend_Copy_Grub_Overlay
	req=(strapdir)
	ckreq || return 1

	# called from blend_prebuild
	
	notice "copying grub overlay"	

	# rm -rf ${workdir}/binary/boot/grub/*
	cp -rfav /$R/extra/common/grub-overlay/boot/grub ${workdir}/binary/boot/
	rm -f ${workdir}/binary/boot/grub/splash.png
	ln ${workdir}/binary/isolinux/splash.png ${workdir}/binary/boot/grub/splash.png

	cp -rfav /$R/extra/common/d-i/preseed.cfg ${workdir}/binary/install/

}

iso_write_isolinux_cfg() {
	fn iso_write_isolinux_cfg
	req=(workdir)
	ckreq || return 1

	# called from blend_prebuild	
	
	notice "copying isolinux overlay"

	local version=$(find $workdir/env/home/syslinux -name "version")
	sources=${version%/*}
	sources=${sources##*/}
	
	mkdir -p $workdir/binary/isolinux	
	
	notice "copying syslinux"
	cp -rav $workdir/env/home/syslinux/$sources/bios/core/isolinux.bin                  $workdir/binary/isolinux/
	cp -rav $workdir/env/home/syslinux/$sources/bios/com32/chain/chain.c32              $workdir/binary/isolinux/
	cp -rav $workdir/env/home/syslinux/$sources/bios/com32/elflink/ldlinux/ldlinux.c32  $workdir/binary/isolinux/
	cp -rav $workdir/env/home/syslinux/$sources/bios/com32/lib/libcom32.c32             $workdir/binary/isolinux/	
	cp -rav $workdir/env/home/syslinux/$sources/bios/com32/libutil/libutil.c32          $workdir/binary/isolinux/
	cp -rav $workdir/env/home/syslinux/$sources/bios/com32/menu/vesamenu.c32            $workdir/binary/isolinux/
	
	cp -rav /$R/extra/common/isolinux-overlay/* $workdir/binary/isolinux/

	#~ cp -rav /$R/extra/common/isolinux-overlay/*.txt $workdir/binary/isolinux/
	#~ cp -rav /$R/extra/common/isolinux-overlay/splash.png $workdir/binary/isolinux/	

}

iso_setup_variables() {
	fn iso_set_variables
	req=(workdir blend)
	ckreq || return 1
	
	blend=${blendlib##*/}
	blend_distribution=${blend%%-*}
	label=`echo "${blend_distribution}" | sed 's/^./\u&/'`
	
	find $workdir/binary -name "*.cfg" -print | xargs sed -i "s/@MENU_TITLE@/${label} Live (${release}) - ${flavor}/g"
	find $workdir/binary -name "*.cfg" -print | xargs sed -i "s/@DISTRO@/${label}/g"	
	find $workdir/binary -name "*.cfg" -print | xargs sed -i "s/@COMPONENTS@/config components username=${blend_distribution} localhost=${blend_distribution} nocomponents=passwd net.ifnames=0 nouveau.modeset=0 radeon.modeset=0 user-default-groups=audio,cdrom,dip,floppy,video,plugdev,netdev,powerdev,scanner,bluetooth,fuse,sudo/g"
	find $workdir/binary -name "*.cfg" -print | xargs sed -i "s/@ABINAME@/${abiname}/g"
	find $workdir/binary -name "*.cfg" -print | xargs sed -i "s/@FLAVOR@/${flavor}/g"
}

blend_post_efi() {
	fn blend_post_efi
	req=(workdir blend blendname)
	ckreq || return 1

notice "executing $blend post_efi"	

}

di_customize() {
	fn di_customize
	req=(R workdir)
	ckreq || return 1
	
	mkdir -p $workdir/d-i
	mv $workdir/binary/install/gtk/initrd.gz $workdir/d-i
	pushd $workdir/d-i
	gunzip initrd.gz
	mkdir -p tmp
	pushd tmp
	
	notice "Customizing debian installer (override)"
	
	cpio -id < ../initrd
	gtkrc="$R/extra/common/d-i/gtkrc"
	logo="$R/extra/common/d-i/bright-banner-beowulf.png.png"
	[[ -f $gtkrc ]] && cp -av $gtkrc $workdir/d-i/tmp/usr/share/themes/Clearlooks/gtk-2.0/
	[[ -f $logo  ]] && cp -av $logo  $workdir/d-i/tmp/usr/share/graphics/
	find . | cpio --create --format='newc' > ../initrd
	popd
	gzip -f initrd
	mv initrd.gz $workdir/binary/install/gtk/initrd.gz
	popd
	rm -rf $workdir/d-i/tmp

	# ls -al $workdir/binary/live
	# ln $workdir/binary/live/vmlinuz $workdir/binary/install/gtk/vmlinuz
	# ln $workdir/binary/live/vmlinuz $workdir/binary/install/vmlinuz	
	
	notice "Symlink firmware packages to /firmware"
	if ls $workdir/binary/pool/main/f/firmware-nonfree/firmware-linux*.deb > /dev/null 2>&1
	then
		DI_FIRMWARE_PACKAGES="firmware-linux"
		if [ -n "${DI_FIRMWARE_PACKAGES}" ]
		then
			echo "syslink - firmware"
			mkdir -p $workdir/binary/firmware
			pushd $workdir/binary/firmware

			for _PACKAGE in ${DI_FIRMWARE_PACKAGES}
			do
				echo "--1--"${DI_FIRMWARE_PACKAGES}
				for _FILE in $(find ../pool -name "${_PACKAGE}*.deb")
				do
					echo "--2--"${_FILE}
					ln -sf ${_FILE} ./
				done
			done

			popd
		fi
	fi		

	# notice "Setup Loadlin"
	# di_Loadlin         || { zerr; wrapup }
	notice "Setup win32-loader"
	di_win32-loader         || { zerr; wrapup }	
}

di_win32-loader() {

	fn di_win32-loader
	req=(workdir os release arch strapdir url_pkg url_di abiname flavor suite)
	ckreq || return 1
	
	notice "Setting up win32-loader ..."

	sudo mv ${workdir}/binary ${strapdir}
		
	cp -r ${strapdir}/usr/share/win32/* ${strapdir}/binary
	
	mv ${strapdir}/binary/win32-loader.exe ${strapdir}/binary/setup.exe
	mv ${strapdir}/binary/win32-loader/g2ldr* ${strapdir}/binary
	rmdir ${strapdir}/binary/win32-loader > /dev/null 2>&1 || true

blendname2=$blendname
blendname2="$(echo "$blendname2" | sed 's/.*/\u&/')"

cat > ${strapdir}/binary/autorun.inf << EOF
[autorun]
open=setup.exe
icon=setup.exe,0
label=Install ${blendname2} GNU/Linux

[Content]
MusicFiles=false
PictureFiles=false
VideoFiles=false
EOF


cat > ${strapdir}/binary/win32-loader.ini << EOF
[installer]
kernel=linux
arch=${arch}
${arch}/linux=install/vmlinuz
${arch}/initrd=install/initrd.gz
EOF

			if [ -e ${strapdir}/binary/install/gtk ]
			then

cat >> ${strapdir}/binary/win32-loader.ini << EOF
${arch}/gtk/linux=install/vmlinuz
${arch}/gtk/initrd=install/gtk/initrd.gz
EOF

			fi

cat >> ${strapdir}/binary/win32-loader.ini << EOF

[grub]
g2ldr=g2ldr
g2ldr.mbr=g2ldr.mbr
EOF


	sudo mv ${strapdir}/binary ${workdir}	

}

di_Loadlin() {

	fn di_Loadlin
	req=(workdir os release arch strapdir url_pkg url_di abiname flavor suite)
	ckreq || return 1
	

# LOADLIN ++++++++++++++++++++++++++++++++++++++++++++

	notice "Loadlin"

	sudo mv ${workdir}/binary ${strapdir}
		
	notice "Setup loadlin and install.bat files"
cat <<EOF | sudo tee ${strapdir}/unpack-loadlin >/dev/null
#!/bin/sh
mkdir binary/tools
cd binary/tools 
gunzip -c "/usr/lib/loadlin/loadlin.exe.gz" > loadlin.exe
gunzip -c "/usr/share/doc/loadlin/manual.txt.gz" > loadlin.txt

EOF

	sudo chmod 777 ${strapdir}/unpack-loadlin
	chroot-script -d unpack-loadlin || zerr
	sudo rm -f ${strapdir}/unpack-loadlin


	sudo mv ${strapdir}/binary ${workdir}	

cat <<EOF | sudo tee ${workdir}/binary/install/install.bat >/dev/null
\tools\loadlin.exe vmlinuz initrd=initrd.gz
EOF

	if [ -e ${workdir}/binary/install/gtk ]
	then

cat <<EOF | sudo tee ${workdir}/binary/install/gtk/install.bat >/dev/null
\tools\loadlin.exe \install\vmlinuz initrd=initrd.gz vga=788
EOF

	fi	
}

#~ di_banudebs () {
	#~ fn di_banudebs
	#~ req=(workdir release)
	#~ ckreq || return 1
	
	#~ notice "executing di_banudebs"
#~ }

di_reprepro () {
	fn di_reprepro
	req=(workdir release abiname arch flavor suite url_pkg root section mirror)
	ckreq || return 1

	mkdir -p $workdir/binary/conf
	
echo \
"Origin: Devuan
Label: Debian ${release} packages
Suite: ${suite}
Codename: ${release}
Architectures: ${arch}
Components: main
UDebComponents: main
Description: Packages for devuan-installer
DebIndices: Packages Release . .gz
UDebIndices: Packages Release . .gz " > $workdir/binary/conf/distributions

WGET_OPTIONS="" #"--verbose"

	mkdir -p $workdir/debs
	
	pushd $workdir/debs
	rm -f ./*Packages*
	
	echo "Downloading udebs"

	case $arch in	
		amd64)	grub_efi="grub-efi-amd64"
				;;
		i386)	grub_efi="grub-efi-ia32"
				;;
		*) error "invalid grub_arch specified"; zerr;;
	esac

	echo "**** 1"
	wget -c -N $mirror/dists/$release/main/debian-installer/binary-$arch/Packages.gz
	gzip -d Packages.gz
	awk '/Filename:/' Packages > tmpPackages
	awk '/Filename: / { print $2 }' tmpPackages > Packages-Main-udeb
	rm -f Packages tmpPackages
	
	wget -c -N wget $mirror/dists/$release/main/binary-$arch/Packages.gz	
	gzip -d Packages.gz
	awk '/Filename: /' Packages > tmpPackages2-di_pkgs
	rm -f Packages	

	di_pkgs=(
		grub-pc
		grub-pc-bin
		grub-efi-amd64
		grub-efi-amd64-bin
		grub-common
		grub2-common
		efibootmgr
		libefiboot1
		libefivar1
		libpopt0
		ucf
		libdevmapper1.02.1
		libfreetype6
		libfuse2
		gettext-base
		libpng16-16
		dmsetup
		lilo
		linux-image-amd64
		busybox
		cryptsetup
		mdadm
		lvm2
		xfsprogs
		jfsutils
		console-setup
		keyboard-configuration
		kbd
	)

	echo "**** 2"
	cat "" > Packages-Main-deb
	for line in $di_pkgs; do
		echo "diPKG: '"$line"'"
		pkg=`grep "^Filename: pool/" tmpPackages2-di_pkgs | grep "/${line}_" | grep ".deb"`
		echo "${pkg/Filename: /""}"  >> Packages-Main-deb
		wget $url_pkg/${pkg#*" "}
 	done
 	
 	grep "^Filename: pool/" tmpPackages2-di_pkgs | grep "/grub-pc_" | grep ".deb"
	
	echo "**** 3"
	if [[ $section == *"non-free"* ]]; then
		echo "non-free"
		wget -c -N $mirror/dists/$release/non-free/binary-$arch/Packages.gz
		gzip -d Packages.gz
		awk '/Filename:/' Packages > tmpPackages
			awk '/firmware-linux-nonfree/' tmpPackages > tmpPackages2 # firmware-linux
		awk '/Filename: / { print $2 }' tmpPackages2 > Packages-Non-Free		
		# cat Packages2 >> Packages-Non-Free
		rm -rf Packages tmpPackages tmpPackages2 Packages.gz
	fi
	rm -f Packages

	echo "Downloading debs/udebs wget"
	cat Packages-Main-udeb Packages-Non-Free Packages-Main-deb >> Packages-List
	for line in $(cat Packages-List); do
		if ! ls "$(basename ${line} | awk -F_ '{ print $1 }')"_* > /dev/null 2>&1
		then
			wget ${WGET_OPTIONS} ${mirror}/${line}
		fi	
	done
	#rm -f Packages
	
	# ls -al *.udeb
	

	#sudo apt-get -o Dir::Cache=/binary.deb -o APT::Install-Recommends=false --download-only install lilo grub-pc linux-image-amd64 busybox cryptsetup mdadm lvm2 xfsprogs jfsutils console-setup keyboard-configuration kbd firmware-linux grub-efi-amd64 grub-efi-amd64-bin
	
# 	sudo mv ${workdir}/binary ${strapdir}
	
	# APT_OPTIONS="--yes --force-yes"
	#~ build_iso_dist 2>&1 | tee log/build1.log_LB_APT_COMMAND="apt-get --yes --force-yes -o Dir::Cache=/binary.deb -o APT::Install-Recommends=false --download-only"
	# _LB_APT_COMMAND="apt-get ${APT_OPTIONS} -o APT::Install-Recommends=false --download-only"
	#~ build_iso_dist 2>&1 | tee log/build1.logDI_PACKAGES="lilo grub-pc linux-image-amd64 busybox cryptsetup mdadm lvm2 xfsprogs jfsutils console-setup keyboard-configuration kbd"
	# DI_FIRMWARE_PACKAGES="" #firmware-linux"
	# DI_REQ_PACKAGES="" #"${grub_efi} ${grub_efi}-bin"

#~ cat <<EOF | sudo tee ${strapdir}/download-di_pkgs >/dev/null
#~ #!/bin/sh
#~ mkdir binary.deb

#~ if [ ! -d "/tmp" ]; then
	#~ mkdir /tmp
	#~ chmod 1777 /tmp
#~ fi

#~ # cd binary.deb

	#~ sudo apt-get update

	#~ _LB_APT_COMMAND="apt-get ${APT_OPTIONS} -o Dir::Cache=binary.deb -o APT::Install-Recommends=false --download-only"
	#~ # _LB_APT_COMMAND="apt-get ${APT_OPTIONS} -o APT::Install-Recommends=false --download-only"
	#~ DI_PACKAGES="lilo grub-pc linux-image-amd64 busybox cryptsetup mdadm lvm2 xfsprogs jfsutils console-setup keyboard-configuration kbd"
	#~ DI_FIRMWARE_PACKAGES="firmware-linux"
	#~ DI_REQ_PACKAGES="${grub_efi} ${grub_efi}-bin"
	
	#~ # We don't want to duplicate .debs of packages in binary/pool that are already
	#~ # installed to target/ via live-installer.
	#~ #
	#~ # However, we need to force various packages' inclusion in binary/pool as
	#~ # d-i does not support (for example) re-installing grub from target/ - the grub
	#~ # .debs must actually exist.

	#~ # Download .debs of the required packages		
	#~ # Chroot chroot ${_LB_APT_COMMAND} install ${DI_PACKAGES} ${DI_FIRMWARE_PACKAGES} ${DI_REQ_PACKAGES}
	#~ # echo "XXX sudo ${_LB_APT_COMMAND} install ${DI_PACKAGES} ${DI_FIRMWARE_PACKAGES} ${DI_REQ_PACKAGES}"
	#~ sudo ${_LB_APT_COMMAND} install ${DI_PACKAGES} # ${DI_FIRMWARE_PACKAGES} ${DI_REQ_PACKAGES}

	#~ # cp -rf /binary.deb/* /binary

	#~ sudo apt-get clean
	
#~ EOF

	#~ # sudo chmod 777 ${strapdir}/download-di_pkgs
	#~ chroot-script -d download-di_pkgs || zerr
	#~ # sudo rm -f ${strapdir}/download-di_pkgs

	#~ mv ${strapdir}/binary.deb/archives/*.deb ${workdir}/debs
	#~ rm -rf ${strapdir}/binary.deb

#  	sudo mv ${strapdir}/binary ${workdir}



	#~ di_pkgs=(
		#~ grub-pc
		#~ grub-pc-bin
		#~ $grub_efi
		#~ ${grub_efi}-bin
		#~ lilo 
		#~ linux-image-amd64 
		#~ busybox
		#~ cryptsetup 
		#~ mdadm 
		#~ lvm2 
		#~ xfsprogs 
		#~ jfsutils 
		#~ console-setup 
		#~ keyboard-configuration 
		#~ kbd 
		#~ firmware-linux
	#~ )

# https://stackoverflow.com/questions/22008193/how-to-list-download-the-recursive-dependencies-of-a-debian-package

#~ apt-cache depends grub-pc | awk '/Depends: / { print $2 }' 

#~ apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances grub-pc | grep "^\w" | sort -u

#~ apt-get download $(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances <your-package-here> | grep "^\w" | sort -u)

# apt install --simulate grub-efi-amd64

	#~ for line in $di_pkgs; do
		#~ echo "diPKG: "$line
		#~ pkg=`grep "^Filename: pool/" Packages | grep "/${line}_" | grep ".deb"`
		#~ wget $url_pkg/${pkg#*" "}
		
		#~ # get dependencies
		#~ di_pkg-depends="apt rdepends ${line} | awk '/ Depends: / { print $2 }'"	
		#~ for line in $di_pkg-depends; do
			#~ echo "diPKG-Depend: "$line
			#~ apt-cache show grub2
			#~ wget $url_pkg/${pkg#*" "}
		#~ done
 	#~ done



# 	apt-get download grub-pc && apt-cache depends -i grub-pc | awk '/Depends:/ {print $2}' | xargs  apt-get download



	 #ls -al *.deb
	
	#~ case $arch in	
		#~ amd64)	grub_efi="grub-efi-amd64"
				#~ ;;
		#~ i386)	grub_efi="grub-efi-ia32"
				#~ ;;
		#~ *) error "invalid grub_arch specified"; zerr;;
	#~ esac	
	
	#~ di_pkgs=(
		#~ grub-pc
		#~ grub-pc-bin
		#~ $grub_efi
		#~ ${grub_efi}-bin
		#~ grub-common
		#~ grub2-common
		#~ efibootmgr
		#~ libefiboot1
		#~ libefivar1
		#~ libpopt0
		#~ ucf
		#~ libdevmapper1.02.1
		#~ libfreetype6
		#~ libfuse2
		#~ gettext-base
		#~ libpng12-0
		#~ dmsetup
	#~ )

	#~ for line in $di_pkgs; do
		#~ echo $line
		#~ pkg=`grep "^Filename: pool/" Packages | grep "/${line}_" | grep ".deb"`
		#~ wget $url_pkg/${pkg#*" "}
 	#~ done
	
	# source $R/extra/reprepro_list
	
	pushd $workdir/binary

	#~ echo "**** 3.1"
	# for line in $udebs_list; do
	for line in $(cat $workdir/debs/Packages-Main-udeb); do
		#~ echo "XXX: "$line
		find $workdir/debs \
			-name "${line##*/}" \
			-exec reprepro \
				--ask-passphrase -b . -V -C main includeudeb $release {} \;
	done
	
	#~ echo "**** 3.2"
	for line in $(cat $workdir/debs/Packages-Non-Free); do
		#~ echo "YYY: "$line
		find $workdir/debs \
			-name "${line##*/}" \
			-exec reprepro \
				--ask-passphrase -b . -V -C main includedeb $release {} \;
	done	

	# echo "**** 3.3"
	for line in $(cat $workdir/debs/Packages-Main-deb); do
		# echo "ZZZ: "$line
		find $workdir/debs \
			-name "${line##*/}" \
			-exec reprepro \
				--ask-passphrase -b . -V -C main includedeb $release {} \;
	done




	#~ for line in $udebs_list; do
		#~ find $workdir/tmp_repo-$release \
			#~ -name "${line}_*${arch}.udeb" \
			#~ -exec reprepro \
				#~ --ask-passphrase -b . -V -C main includeudeb $release {} \;
	#~ done
		
	#~ for line in $udebs_list; do
		#~ find $workdir/tmp_repo-$release \
			#~ -name "${line}_*all.udeb" \
			#~ -exec reprepro \
				#~ --ask-passphrase -b . -V -C main includeudeb $release {} \;
	#~ done

	#~ for line in $modules_list; do 
		#~ find $workdir/tmp_repo-$release \
			#~ -name "*${line}-modules-${abiname}*-${flavor}-di_*_${arch}.udeb" \
			#~ -exec reprepro \
				#~ --ask-passphrase -b . -V -C main includeudeb $release {} \;
 	#~ done

	#~ find $workdir/debs -name "*.udeb" -exec reprepro \
		#~ --ask-passphrase -b . -V -C main includeudeb $release {} \;		
	
	#~ find $workdir/debs -name "*.deb" -exec reprepro \
		#~ --ask-passphrase -b . -V -C main includedeb $release {} \;		
		
	popd && popd
	
	echo "**** 4"
	rm -rf $workdir/binary/conf
	rm -rf $workdir/binary/db
	#~ ln -s $workdir/binary/dists/$release $workdir/binary/dists/$suite	
	
}

di_repreproZZ () {
	fn di_repreproZZ
	req=(workdir release abiname arch flavor suite url_pkg root section mirror)
	ckreq || return 1

	notice "di_reprepro - override"

	mkdir -p $workdir/binary/conf
	
echo \
"Origin: Devuan
Label: Debian ${release} packages
Suite: ${suite}
Codename: ${release}
Architectures: ${arch}
Components: main
UDebComponents: main
Description: Packages for devuan-installer
DebIndices: Packages Release . .gz
UDebIndices: Packages Release . .gz " > $workdir/binary/conf/distributions

	notice "Creating binary/pool"

	notice "Move binary to bootstrap"
	sudo mv ${workdir}/binary ${strapdir}

	mkdir ${strapdir}/binary/debs
	pushd ${strapdir}/binary

ls -al

	echo "##### debian-installer/binary-"$arch
	wget -c -N $mirror/dists/$release/main/debian-installer/binary-$arch/Packages.gz
	gzip -d Packages.gz
	awk '/Filename:/' Packages > Packages1
	sort Packages1 > Packages-List
	rm -f Packages Packages1 Packages.gz

	if [[ $section == *"non-free"* ]]; then
		echo "non-free"
		wget -c -N $mirror/dists/$release/non-free/binary-$arch/Packages.gz
		gzip -d Packages.gz
		awk '/Filename:/' Packages > tmpPackages
		awk '/firmware-linux-nonfree/' tmpPackages > Packages2
		cat Packages2 >> Packages-List
		rm -rf Packages Packages2 tmpPackages Packages.gz
	fi
	rm -f Packages
	awk '/Filename: / { print $2 }' Packages-List > ./debs/Packages
	rm -f Packages-List

	echo "Downloading udebs"

	cd debs
	
	for line in $(cat Packages); do
		if ! ls "$(basename ${line} | awk -F_ '{ print $1 }')"_* > /dev/null 2>&1
		then
			#echo "Download: ${mirror}/${UDEB}"
			wget ${WGET_OPTIONS} ${mirror}/${line}
		fi	
	done		
	
	echo "Make pool - Moving udebs"	
	while read line; do
		if [ -f "$(basename ${line})" ]
		then
			mkdir -p $(dirname ${line})
			mv "$(basename ${line})" "$(dirname ${line})"
		fi
	done < Packages

	cd ..

ls -al

	rm -f ./Packages*
	
	popd

	sudo mv ${strapdir}/binary/debs/pool ${strapdir}/binary
	rm -rf ${strapdir}/binary/debs
	sudo mv ${strapdir}/binary ${workdir}
	
	rm -rf $workdir/binary/conf
	rm -rf $workdir/binary/db
	ln -s $workdir/binary/dists/$release $workdir/binary/dists/$suite
	
exit

	
	
		
		
}

di_repreproA () {
	fn di_repreproA
	req=(workdir release abiname arch flavor suite url_pkg root section mirror)
	ckreq || return 1

	notice "di_reprepro - override"

	mkdir -p $workdir/binary/conf
	
echo \
"Origin: Devuan
Label: Debian ${release} packages
Suite: ${suite}
Codename: ${release}
Architectures: ${arch}
Components: main
UDebComponents: main
Description: Packages for devuan-installer
DebIndices: Packages Release . .gz
UDebIndices: Packages Release . .gz " > $workdir/binary/conf/distributions


	notice "Creating binary/pool"

	notice "Move binary to bootstrap"
	sudo mv ${workdir}/binary ${strapdir}

cat <<EOF | sudo tee ${strapdir}/create_binary-pool >/dev/null
#!/bin/sh
mkdir binary/debs
cd binary/debs 

echo "##### debian-installer/binary-"$arch
wget -c -N $mirror/dists/$release/main/debian-installer/binary-$arch/Packages.gz
gzip -d Packages.gz
awk '/Filename:/' Packages > Packages1
sort Packages1 > Packages-List
rm -f Packages Packages1 Packages.gz

if [[ $section == *"non-free"* ]]; then
	echo "non-free"
	wget -c -N $mirror/dists/$release/non-free/binary-$arch/Packages.gz
	gzip -d Packages.gz
	awk '/Filename:/' Packages > tmpPackages
	awk '/firmware-linux-nonfree/' tmpPackages > Packages2
	cat Packages2 >> Packages-List
	rm -rf Packages Packages2 tmpPackages Packages.gz
fi
rm -f Packages
mv Packages-List Packages

UDEBS="${UDEBS} $(awk '/Filename: / { print $2 }' Packages)"

for UDEB in ${UDEBS}
do
	# Downloading udebs
	if ! ls "$(basename ${UDEB} | awk -F_ '{ print $1 }')"_* > /dev/null 2>&1
	then
		wget ${WGET_OPTIONS} ${mirror}/${UDEB}
	fi
done

for UDEB in ${UDEBS}
do
	if [ -f "$(basename ${UDEB})" ]
	then
		mkdir -p $(dirname ${UDEB})
		mv "$(basename ${UDEB})" "$(dirname ${UDEB})"
	fi
done

EOF

	sudo chmod 777 ${strapdir}/create_binary-pool
	chroot-script -d create_binary-pool || zerr
	sudo rm -f ${strapdir}/create_binary-pool


	sudo mv ${strapdir}/binary ${workdir}
	
	rm -rf $workdir/binary/conf
	rm -rf $workdir/binary/db
	ln -s $workdir/binary/dists/$release $workdir/binary/dists/$suite		
		
}

di_repreproX () {
	fn di_repreproX
	req=(workdir release abiname arch flavor suite url_pkg root section)
	ckreq || return 1

	notice "di_reprepro - override"
	
	mkdir -p $workdir/binary/conf
	
echo \
"Origin: Devuan
Label: Debian ${release} packages
Suite: ${suite}
Codename: ${release}
Architectures: ${arch}
Components: main
UDebComponents: main
Description: Packages for devuan-installer
DebIndices: Packages Release . .gz
UDebIndices: Packages Release . .gz " > $workdir/binary/conf/distributions



	notice "Creating binary/pool"

	mkdir -p $workdir/debs
	
	pushd $workdir/debs
	
	rm -f Packages	
	
	notice "debian-installer/binary-"$arch
	#~ wget -c http://deb.devuan.org/merged/dists/$release/main/debian-installer/binary-$arch/Packages.gz	
	wget -c -N $mirror/dists/$release/main/debian-installer/binary-$arch/Packages.gz	
	gzip -d Packages.gz
	awk '/Filename:/' Packages > Packages-List
	rm -f Packages Packages.gz	
	# mv Packages Packages-List
	# rm -f Packages.gzexit
	
	#~ notice "binary-"$arch
	#~ wget -c -N $url_pkg/dists/$release/main/binary-$arch/Packages.gz
	#~ gzip -d Packages.gz
	#~ mv Packages Packages-List
	#~ rm -f Packages.gz

	#~ notice "binary-all"
	#~ wget -c -N $url_pkg/dists/$release/main/binary-all/Packages.gz
	#~ gzip -d Packages.gz
	#~ cat Packages >> Packages-List
	#~ rm -rf ./{Packages,Packages.gz}

	#~ if [[ $section == *"contrib"* ]]; then
		#~ notice "contrib"
		#~ wget -c -N $url_pkg/dists/$release/contrib/binary-$arch/Packages.gz
		#~ gzip -d Packages.gz
		#~ cat Packages >> Packages-List
		#~ rm -rf ./{Packages,Packages.gz}
	#~ fi

	if [[ $section == *"non-free"* ]]; then
		notice "non-free"
		wget -c -N $url_pkg/dists/$release/non-free/binary-$arch/Packages.gz
		gzip -d Packages.gz
		# cat Packages >> Packages-List
		awk '/Filename:/' Packages > tmpPackages
		awk '/firmware-linux-nonfree/' tmpPackages >> Packages2
		cat Packages1 Packages2 >> Packages-List		
		# rm -rf Packages Packages1 tmpPackages Packages.gz
	fi
	rm -f Packages

	notice "di_reprepro - AWK"
	
	awk '/^Filename:/{print}' Packages-List >> Packages	
	mv Packages-List Packages	

	for line in Packages; do
		echo "XXX:"$line
		pkg=`grep "^Filename: pool/" Packages | grep "/${line}_" | grep ".deb"`
		wget $url_pkg/${pkg#*" "}
 	done
	
	case $arch in	
		amd64)	grub_efi="grub-efi-amd64"
				;;
		i386)	grub_efi="grub-efi-ia32"
				;;
		*) error "invalid grub_arch specified"; zerr;;
	esac	
	
	di_pkgs=(
		grub-pc
		grub-pc-bin
		$grub_efi
		${grub_efi}-bin
		grub-common
		grub2-common
		efibootmgr
		libefiboot1
		libefivar1
		libpopt0
		ucf
		libdevmapper1.02.1
		libfreetype6
		libfuse2
		gettext-base
		libpng16-16_1.6.36-6
		dmsetup
		firmware-linux-nonfree
	)

	for line in $di_pkgs; do
		echo $line
		pkg=`grep "^Filename: pool/" Packages | grep "/${line}_" | grep ".deb"`
		wget $url_pkg/${pkg#*" "}
 	done
	
	#~ source $R/extra/reprepro_list
	
	pushd $workdir/binary

	#~ for line in $udebs_list; do
		#~ find $workdir/tmp_repo-$release \
			#~ -name "${line}_*${arch}.udeb" \
			#~ -exec reprepro \
				#~ --ask-passphrase -b . -V -C main includeudeb $release {} \;
	#~ done
	
	#~ for line in $udebs_list; do
		#~ find $workdir/tmp_repo-$release \
			#~ -name "${line}_*all.udeb" \
			#~ -exec reprepro \
				#~ --ask-passphrase -b . -V -C main includeudeb $release {} \;
	#~ done

	#~ for line in $modules_list; do 
		#~ find $workdir/tmp_repo-$release \
			#~ -name "*${line}-modules-${abiname}*-${flavor}-di_*_${arch}.udeb" \
			#~ -exec reprepro \
				#~ --ask-passphrase -b . -V -C main includeudeb $release {} \;
 	#~ done
	
	find $workdir/debs -name "*.*" -exec reprepro \
		--ask-passphrase -b . -V -C main includedeb $release {} \;		
		
	popd && popd
	
	rm -rf $workdir/binary/conf
	rm -rf $workdir/binary/db
	ln -s $workdir/binary/dists/$release $workdir/binary/dists/$suite	
	
}







